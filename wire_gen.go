// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/alextanhongpin/go-api-test/config"
	"github.com/alextanhongpin/go-api-test/rest"
	"github.com/alextanhongpin/go-api-test/rest/apis"
	"github.com/alextanhongpin/go-api-test/rest/apis/v1"
	"github.com/alextanhongpin/go-core-microservice/http/middleware"
	"github.com/google/wire"
	"net/http"
)

// Injectors from wire.go:

func newRouter() http.Handler {
	configConfig := config.New()
	healthHandler := apis.NewHealthHandler(configConfig)
	middleware := provideBearerMiddleware(configConfig)
	api := &apis.API{
		HealthHandler: healthHandler,
		BearerMW:      middleware,
	}
	categoryHandler := &v1.CategoryHandler{}
	mainProductUsecase := &productUsecase{}
	productHandler := v1.NewProductHandler(mainProductUsecase)
	v1API := &v1.API{
		CategoryHandler: categoryHandler,
		ProductHandler:  productHandler,
	}
	handler := provideRouter(api, v1API)
	return handler
}

// wire.go:

var (
	// Usecases set.
	productUsecaseSet = wire.NewSet(wire.Struct(new(productUsecase)), wire.Bind(new(v1.ProductUsecase), new(*productUsecase)))

	// Handlers set.
	healthHandlerSet = wire.NewSet(apis.NewHealthHandler)

	categoryHandlerSet = wire.NewSet(wire.Struct(new(v1.CategoryHandler)))

	productHandlerSet = wire.NewSet(
		productUsecaseSet, v1.NewProductHandler,
	)

	// APIs set.
	rootSet = wire.NewSet(
		healthHandlerSet, wire.Struct(new(apis.API), "*"),
	)

	v1Set = wire.NewSet(
		categoryHandlerSet,
		productHandlerSet, wire.Struct(new(v1.API), "*"),
	)
)

type productUsecase struct{}

func (uc *productUsecase) Find(ctx context.Context, id string) (*v1.Product, error) {
	return &v1.Product{
		Name: "red socks",
	}, nil
}

func (uc *productUsecase) List(ctx context.Context) ([]v1.Product, error) {
	return []v1.Product{
		{Name: "red socks"},
		{Name: "green socks"},
		{Name: "blue socks"},
	}, nil
}

func provideBearerMiddleware(cfg *config.Config) middleware.Middleware {
	return middleware.RequireAuth([]byte(cfg.JWT.Secret))
}

func provideRouter(
	root *apis.API, v1_2 *v1.API,
) http.Handler {
	r := rest.New()

	root.Register(r)
	v1_2.
		Register(r)

	return r
}
