// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/alextanhongpin/go-api-test/rest/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, id
func (_m *ProductUsecase) Find(ctx context.Context, id string) (*v1.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *v1.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *ProductUsecase) List(ctx context.Context) ([]v1.Product, error) {
	ret := _m.Called(ctx)

	var r0 []v1.Product
	if rf, ok := ret.Get(0).(func(context.Context) []v1.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
